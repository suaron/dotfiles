set nocompatible
syntax enable

call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on                   " Load the plugin and indent settings for the detected filetype

set history=1000
set fileencodings=utf-8,cp1251,koi8-r,cp866 " List auto detected file encoding
set encoding=utf-8                          " Default encoding
set showmode

colorscheme railscasts+

" Turn backup off
set nobackup
set nowb
set noswapfile

"Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*

set nolazyredraw " Turn off lazy redraw
set ruler        " Show ruler
set hidden       " Switch betwin buffers without savingl
set wildmenu     " Turn on wild menu
set number       " Show line numbers
set showcmd      " Display incomplete commands
set cursorline   " Cursor highlights
set nofoldenable " Turn off folding

"Invisible characters
set listchars=tab:▸\ ,eol:¬

"Status bar
set statusline=%<%f%h%m%r\ %b\ %{fugitive#statusline()}%{&encoding}\ 0x\ \ %l,%c%V\ %P
set laststatus=2
set sidescrolloff=2

set mouse=a "Use mouse everywhere

set hlsearch    " Highlight search
set incsearch   " Incremental search, search as you type
set ignorecase  " Ignore case when searching
set smartcase   " Ignore case when searching lowercase
set autoindent  " Automatic indent new lines
set smartindent " Be smart about it
set nowrap      " Do not wrap lines

set softtabstop=2
set shiftwidth=2
set tabstop=4

"Expand tabs to spaces
set expandtab
set nosmarttab

"Support for numbered/bullet lists
set formatoptions+=n

" Allow virtual edit in visual block ..
set virtualedit=block

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Some file types should wrap their text
function! s:setupWrapping()
  set wrap
  set linebreak
  set textwidth=80
  set nolist
endfunction

au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,config.ru,*.rake,*.ru,*.god,*.rabl} set ft=ruby
au BufRead,BufNewFile {.localrc,localrc} set ft=sh
au BufRead,BufNewFile *.sql set ft=pgsql
au BufRead,BufNewFile *.haml set ft=haml
au BufNewFile,BufRead *.json set ft=javascript
" Make sure all mardown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

au Filetype gitcommit set tw=80 spell
au Filetype ruby      set ts=2

set splitbelow splitright

"Disable bell
set novisualbell
set t_vb=

"Fix <Enter> for comment
set fo+=cr

set sessionoptions=curdir,buffers,tabpages "session options

let mapleader = "," "Set Leader

"Hide last search highlighting
map <Leader>h :nohlsearch<cr>

"Write with sudo with w!!
cmap w!! w !sudo tee % >/dev/null

"Show CommandT search panel
map <Leader>f :CommandT<CR>
let g:CommandTMaxHeight=30

"Show NERDTree
map <Leader>n :NERDTreeToggle<CR>

"Show current file in NERDTree
map <leader>r :NERDTreeFind<CR>

"C-c and C-v - Copy/Paste with native clipbord
vmap <C-C> "+yi
imap <C-V> <esc>"+gPi

" Strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" You don't know what you're missing if you don't use this.
nmap <C-e> :e#<CR>

" Move between open buffers.
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

" Let's try buffkill-vim using my favorite Emacs binding...
nmap <Esc>k :BD<CR>
nmap <M-k> :BD<CR>
nmap <D-k> :BD<CR>

" JSON Beautify
command! JSONFormat :execute ':%!python -m json.tool' | set filetype=javascript

" Rename.vim  -  Rename a buffer within Vim and on the disk
" Copyright June 2007 by Christian J. Robinson <infynity@onewest.net>
" Distributed under the terms of the Vim license.  See ":help license".
" http://www.infynity.spodzone.com/vim/Rename.vim
" Usage: :Rename[!] {newname}
command! -nargs=* -complete=file -bang Rename :call Rename("<args>", "<bang>")
function! Rename(name, bang)
    let l:curfile = expand("%:p")
    let v:errmsg = ""
    silent! exe "saveas" . a:bang . " " . a:name
    if v:errmsg =~# '^$\|^E329'
        if expand("%:p") !=# l:curfile && filewritable(expand("%:p"))
            silent exe "bwipe! " . l:curfile
            if delete(l:curfile)
                echoerr "Could not delete " . l:curfile
            endif
        endif
    else
        echoerr v:errmsg
    endif
endfunction
