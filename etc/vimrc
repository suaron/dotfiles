runtime bundle/vim-pathogen/autoload/pathogen.vim

call pathogen#infect()
call pathogen#helptags()

set nocompatible

" Expand tabs to spaces
set expandtab
set nosmarttab

set softtabstop=2
set shiftwidth=2
set tabstop=4

let g:solarized_termcolors=256
colorscheme solarized
set background=dark

set wildignore+=tags

" Switch betwin buffers without savingl
set hidden

" Show line numbers
set number

" Cursor highlights
set cursorline

" Turn off folding
set nofoldenable

" Use the system clipboard
set clipboard=unnamed

" Indicator chars
set showbreak=â†ª\

" Use mouse everywhere
set mouse=a

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make set noexpandtab

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g`\"" | endif

  au BufRead,BufNewFile {Procfile} set ft=ruby
  au BufRead,BufNewFile {.localrc,localrc} set ft=sh
endif

" Set Leader
let mapleader = ","

" Move between open buffers.
map <C-n> :bnext<CR>
map <C-p> :bprev<CR>

" Toggle spell check with <F5> for English
map <F5> :setlocal spell! spelllang=en_us<cr>
imap <F5> <ESC>:setlocal spell! spelllang=en_us<cr>

" Toggle spell check with <F6> for Russian
map <F6> :setlocal spell! spelllang=ru_RU<cr>
imap <F6> <ESC>:setlocal spell! spelllang=ru_RU<cr>

" Turn backup off
set nobackup
set nowb
set noswapfile
set updatecount=0

" Tab completion
set wildmode=list:longest,list:full

set complete=.,w,b,u,t,i

" Be smart about it
set smartindent

" Do not wrap lines
set nowrap

" Enable visual bell (disable audio bell)
set vb
set t_vb=

" Status bar
set sidescrolloff=2
if has("statusline") && !&cp
  set laststatus=2                         " always show the status bar
  set statusline=%f\ %m\ %r                " filename, modified, readonly
  set statusline+=%{fugitive#statusline()}
  set statusline+=\ %l/%L[%p%%]            " current line/total lines
  set statusline+=\ %v[0x%B]               " current column [hex char]
endif

" Highlight search
set hlsearch

" Ignore case when searching
set ignorecase

" Ignore case when searching lowercase
set smartcase

" Have :s///g flag by default on
set gdefault

" Paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

" You don't know what you're missing if you don't use this.
nmap <C-e> :e#<CR>

" In command-line mode, C-a jumps to beginning (to match C-e)
cnoremap <C-a> <Home>

" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
cnoremap %$ <C-R>=expand('%:t:r')<cr>

" Strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<cr>

map <leader>F :Ack<space>

map <leader>f :CommandT <cr>
let g:CommandTMaxHeight=30
if &term =~ "xterm" || &term =~ "screen"
  " as of March 2013, with current iTerm (1.0.0.20130319), tmux (1.8)
  " and Vim (7.3, with patches 1-843), this is all I need:
  let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
  " when I originally started using Command-T inside a terminal,
  " I used to need these as well:
  let g:CommandTSelectNextMap = ['<Up>', '<ESC>OB']
  let g:CommandTSelectPrevMap = ['<Down>', '<ESC>OA']
endif

let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]

au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &ft == '' | setfiletype nginx | endif

cabbrev help tab help
